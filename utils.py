import random
seq_before_guide = "ATGGTGAGCAAGGGCGAGGAGGATAACATGGCCATCATCAAGGAGTTCATGCGCTTCAAGGTGCACATGGAGGGCTCCGTGAACGGCCACGAGTTCGAGATCGAGGGCGAGGGCGAGGGCCGCCCCTACGAGGGCACCCAGACCGCCAAGCTGAAGGTGACCAAGGGTGGCCCCCTGCCCTTCGCCTGGGACATCCTGTCCCCTCAGTTCATGTACGGCTCCAAGGCCTACGTGAAGCACCCCGCCGACATCCCCGACTACTTGAAGCTGTCCTTCCCCGAGGGCTTCAAGTGGGAGCGCGTGATGAACTTCGAGGACGGCGGCGTGGTGACCGTGACCCAGGACTCCTCCCTGCAGGACGGCGAGTTCATCTACAAGGTGAAGCTGCGCGGCACCAACTTCCCCTCCGACGGCCCCGTAATGCAGAAGAAGACCATGGGCTGGGAGGCCTCCTCCGAGCGGATGTACCCCGAGGACGGCGCCCTGAAGGGCGAGATCAAGCAGAGGCTGAAGCTGAAGGACGGCGGCCACTACGACGCTGAGGTCAAGACCACCTACAAGGCCAAGAAGCCCGTGCAGCTGCCCGGCGCCTACAACGTCAACATCAAGTTGGACATCACCTCCCACAACGAGGACTACACCATCGTGGAACAGTACGAACGCGCCGAGGGCCGCCACTCCACCGGCGGCATGGACGAGCTGTACAAGCCCGGTGCAGATGGTACCGGCAGCT"

seq_after_guide_to_endof_mNeon = 'GGCAGCGAGGGCAGAGGAAGTCTTCTAACATGCGGTGACGTGGAGGAGAATCCCGGCCCTATGGTCAGCAAAGGCGAAGAAGACAACATGGCATCACTGCCAGCGACACACGAACTTCATATTTTCGGCTCCATCAATGGTGTGGACTTCGATATGGTTGGACAGGGTACTGGGAACCCTAACGATGGATATGAGGAGTTGAACTTGAAGAGTACCAAGGGCGATCTTCAGTTTTCACCTTGGATTCTCGTACCTCATATAGGTTATGGCTTTCATCAATATCTGCCCTATCCTGACGGTATGTCACCTTTCCAAGCAGCTATGGTTGACGGGAGCGGTTATCAGGTTCACCGGACAATGCAGTTTGAAGATGGAGCCTCTTTGACCGTAAATTATCGGTATACTTATGAGGGCAGCCATATTAAAGGCGAGGCTCAAGTTAAGGGGACTGGGTTCCCCGCGGATGGTCCCGTAATGACAAACAGTCTGACGGCTGCAGACTGGTGCCGCTCTAAGAAGACATATCCAAATGACAAGACGATTATTAGCACTTTCAAGTGGTCATACACTACAGGAAATGGTAAACGCTATAGGAGCACTGCCCGGACCACGTATACTTTCGCGAAGCCGATGGCGGCAAATTATTTGAAAAACCAACCGATGTATGTGTTCAGAAAGACAGAACTCAAGCATTCTAAAACTGAACTGAACTTCAAAGAGTGGCAGAAAGCCTTTACTGATGTAATGGGCATGGACGAACTCTATAAGTAAGCGGCC'

seq_after_target = 'GGCCCGTTTAAACCCGCTGATCAGCCT'

seq_after_mNeon = 'GCGGCCGCTCGAGTCTAGAGGGCCCGTTTAAACCCGCTGATCAGCCT'

def cis_sequence_from_guide_and_target(guide, target):
    return seq_before_guide + guide + seq_after_guide_to_endof_mNeon + target + seq_after_target

def trans_sequence_from_guide(guide):
    return seq_before_guide + guide + seq_after_guide_to_endof_mNeon + seq_after_mNeon

def iter_sample_fast(iterable, samplesize):
    results = []
    iterator = iter(iterable)
    # Fill in the first samplesize elements:
    try:
        for _ in range(samplesize):
            results.append(next(iterator))
    except StopIteration:
        raise ValueError("Sample larger than population.")
    random.shuffle(results)  # Randomize their positions
    for i, v in enumerate(iterator, samplesize):
        r = random.randint(0, i)
        if r < samplesize:
            results[r] = v  # at a decreasing rate, replace random items
    return results
